---
import BaseLayout from "@/layout/baseLayout.astro";
import type Article from "../interfaces/article";
import fetchApi from "@/lib/strapi";

const articles = await fetchApi<Article[]>({
    endpoint: 'articles',
    wrappedByKey: 'data',
    query: {
        populate: "*",
        "pagination[page]": "1",
        "pagination[pageSize]": "6",
        "sort[0]": "createdAt:desc"
    }
})
---

<script>
    import fetchApi from "../lib/strapi";
    import type Article from "../interfaces/article";
    import type ArticlePreview from "../components/web-components/articlePreview";

    let lastScrolledPage = 1;

    function createArticlePreviewComponent(article: Article): ArticlePreview {
        const articlePreviewElement: ArticlePreview = document.createElement("article-preview") as ArticlePreview;
        articlePreviewElement.id = String(article.id);
        articlePreviewElement.title = article.attributes.titre;
        articlePreviewElement.articleType = article.attributes.etiquette;
        articlePreviewElement.articleDescription = article.attributes.description;
        articlePreviewElement.createdAt = article.attributes.createdAt;
        articlePreviewElement.imageURL = `${import.meta.env.PUBLIC_STRAPI_URL}${article.attributes.image.data.attributes.url}`;
        return articlePreviewElement;
    }


    const intersectionObserver = new IntersectionObserver(entries => {
        if(entries[0].intersectionRatio <=0) return;
        lastScrolledPage++;
        fetchApi<Article[]>({
            endpoint: 'articles',
            wrappedByKey: 'data',
            query: {
                populate: "*",
                "pagination[page]": String(lastScrolledPage),
                "pagination[pageSize]": "6",
                "sort[0]": "createdAt:desc"
            }
        }).then((articles: Article[]) => {
            articles.forEach(article => {
                document.querySelector("#article-list-wrapper")?.append(
                    createArticlePreviewComponent(article)
                );
            })
        })
    });
    const scrollTarget: HTMLDivElement | null  = document.querySelector("#infinite-scroll-target")
    if(!scrollTarget) throw new Error("Wrong scroll target!");
    intersectionObserver.observe(scrollTarget);
</script>

<BaseLayout title="Notre Association - H2VL">
    <section id="main-content-wrapper" class="flex flex-col gap-8 p-5 max-w-[2000px]">
        <h2 class="font-bold text-2xl">Actualit√©s</h2>
        <div id="article-list-wrapper" class="grid gap-x-20 gap-y-10 lg:gap-y-20 grid-cols-1 md:grid-cols-3">
            {
                articles.map((article) => (
                        <article-preview
                            id={article.id}
                            title={article.attributes.titre}
                            articleType={article.attributes.etiquette}
                            articleDescription={article.attributes.description}
                            createdAt={article.attributes.createdAt}
                            imageURL={import.meta.env.PUBLIC_STRAPI_URL + article.attributes.image.data.attributes.url}
                        />
                ))
            }
        </div>
        <div id="infinite-scroll-target" class="w-full h-10 bg-transparent">
        </div>
    </section>

</BaseLayout>
