---
---

<script>
    import { computePosition, flip, shift, offset, autoUpdate } from "@floating-ui/dom";

    class DropdownNavigationLink extends HTMLElement {

        private readonly button: HTMLElement;
        private readonly contents: HTMLElement;
        private readonly icon: HTMLElement;

        private isOpen: boolean

        private disableAutoUpdate = () => {};

        private MOBILE_BREAKPOINT: number = 768

        constructor() {
            super();
            const buttonSelector: HTMLElement | null = this.querySelector(".dropdown-button");
            const contentSelector: HTMLElement | null = this.querySelector(".dropdown-contents");
            const iconSelector: HTMLElement | null =  this.querySelector(".material-symbols-outlined");
            if(buttonSelector === null || contentSelector === null || iconSelector === null)
                throw new Error("ArticleList component HTML structure error");

            this.button = buttonSelector;
            this.contents = contentSelector;
            this.icon = iconSelector;

            this.isOpen = !this.contents.classList.contains('hidden');
        }

        connectedCallback() {
            if(!this.button || !this.contents || this.icon) throw new Error("Article list HTML structure error");
            this.button.addEventListener('click', () => {
                if(this.isOpen) {
                    this.hideContents();
                } else {
                    this.showContents();
                }
            });

        }

        private updatePosition(): void {

            computePosition(
                this.button,
                this.contents,
                {
                    middleware: [offset(30), flip(), shift()]
                }
            ).then(({x, y}) => {
                Object.assign(this.contents.style, {
                    left: `${x}px`,
                    top: `${y}px`
                });
            });
        }

        private showContents(): void {
            if(window.innerWidth > this.MOBILE_BREAKPOINT) {
                this.disableAutoUpdate = autoUpdate(
                    this.button,
                    this.contents,
                    this.updatePosition.bind(this)
                );
            }
            this.contents.classList.replace('hidden', 'block');
            this.icon.innerText = "expand_less";
            this.isOpen = true;
        }

        private hideContents(): void {
            if(window.innerWidth > this.MOBILE_BREAKPOINT) this.disableAutoUpdate();
            this.contents.classList.replace('block', 'hidden');
            this.icon.innerText = "expand_more";
            this.isOpen = false;
        }
    }

    customElements.define('dropdown-navigation-link', DropdownNavigationLink);

</script>

<dropdown-navigation-link>
    <div class="relative">
        <button
            class="dropdown-button"
        ><slot name="main-text"/><span class="material-symbols-outlined not-sr-only pl-2 align-middle">expand_more</span></button>
        <div class="dropdown-contents md:absolute md:bg-blue-400 md:p-3 md:rounded-md md:shadow-sm max-md:mt-5 hidden">
            <slot name="dropdown-elements"/>
        </div>
    </div>
</dropdown-navigation-link>